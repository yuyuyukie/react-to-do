{"version":3,"sources":["reportWebVitals.js","ToDo.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","inputMessage","ToDo","props","state","input","todoList","showDescription","showStatus","handleKeyDown","bind","e","this","setState","window","addEventListener","removeEventListener","key","addToDo","todoObj","value","isDone","Date","now","toString","target","index","findIndex","todo","currentTarget","id","newToDoList","className","modifiedToDoList","slice","splice","instructionID","match","filter","sort","fE","sE","onDescriptionClick","handleDescriptionClick","inputValue","onInputChange","handleInputChange","clearForm","turnMessageOn","turnMessageOff","handleShowStatusClick","eliminateDone","handleToDoClick","React","Component","Header","onClick","style","display","Description","Generator","type","color","onChange","onFocus","onBlur","Container","console","log","length","map","i","isdone","checked","readOnly","Controller","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43462c95.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable no-useless-constructor */\r\nimport React from \"react\";\r\nimport \"./ToDo.css\";\r\n\r\n// なにもないときのテキスト OK\r\n// isDoneを消すやつOK\r\n// Deleteのファビコンを押したときに認識されてない。Edit機能なくせばすぐできそう。\r\n//Deleteができてない。 OK\r\n// keyをindexにしているが、これだと整理やソートできない\r\n// Date.now()をつかっている  OK\r\n// deleteボタン OK\r\n// Controller周り\r\n// Container完了関係 OKスタイリングまだ（doneContainerを\r\n// 消したためfilterでソートしたりスタイリング必要 OK\r\n\r\n// 入力欄が空白時のメッセージ\r\nconst inputMessage = \"Enterキーでも追加できます。\";\r\n\r\nclass ToDo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: inputMessage,\r\n      todoList: [],\r\n      showDescription: false,\r\n      showStatus: \"showAll\", //[\"showAll\", \"showActive\", \"showDone\"]\r\n    };\r\n    // bind section\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n  }\r\n  turnMessageOn(e) {\r\n    if (this.state.input === \"\") {\r\n      this.setState({\r\n        input: inputMessage,\r\n      });\r\n    }\r\n  }\r\n  turnMessageOff(e) {\r\n    if (this.state.input === inputMessage) {\r\n      this.setState({\r\n        input: \"\",\r\n      });\r\n    }\r\n  }\r\n\r\n  // Enterで追加用。addToDoで処理\r\n  componentDidMount() {\r\n    window.addEventListener(\"keydown\", this.handleKeyDown);\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\r\n  }\r\n  handleKeyDown(e) {\r\n    if (e.key === \"Enter\") {\r\n      this.addToDo();\r\n    }\r\n  }\r\n  handleDescriptionClick() {\r\n    this.setState((state) => {\r\n      return {\r\n        showDescription: !state.showDescription,\r\n      };\r\n    });\r\n  }\r\n  addToDo(e) {\r\n    const state = this.state;\r\n    // 初期メッセージなら空白を挿入\r\n    const todoText = state.input === inputMessage ? \"\" : state.input;\r\n    const todoObj = {\r\n      value: todoText,\r\n      isDone: false,\r\n      key: Date.now().toString(),\r\n    };\r\n    this.setState({\r\n      input: \"\",\r\n      todoList: [...state.todoList, todoObj],\r\n    });\r\n  }\r\n  handleInputChange(e) {\r\n    this.setState((state) => {\r\n      return {\r\n        input: e.target.value,\r\n      };\r\n    });\r\n  }\r\n  clearForm(e) {\r\n    this.setState((state) => {\r\n      return {\r\n        input: \"\",\r\n      };\r\n    });\r\n  }\r\n  handleToDoClick(e) {\r\n    const target = e.target;\r\n    const index = this.state.todoList.findIndex((todo) => {\r\n      return todo.key === e.currentTarget.id;\r\n    });\r\n    let newToDoList = [...this.state.todoList];\r\n    // DeleteBtn Iはファビコン\r\n    if (target.id === \"deleteBtn\" || target.className === \"fa fa-close\") {\r\n      let modifiedToDoList = newToDoList.slice();\r\n      // eslint-disable-next-line\r\n      let deletedToDo = modifiedToDoList.splice(index, 1);\r\n      this.setState((state) => {\r\n        return {\r\n          todoList: modifiedToDoList,\r\n        };\r\n      });\r\n    } else {\r\n      newToDoList[index].isDone = !newToDoList[index].isDone;\r\n      this.setState((state) => {\r\n        return {\r\n          todoList: newToDoList,\r\n        };\r\n      });\r\n    }\r\n  }\r\n  handleShowStatusClick(e) {\r\n    const instructionID = e.target.id;\r\n    // eslint-disable-next-line\r\n    const showStatus = this.state.showStatus;\r\n    if (instructionID.match(/showAll|showActive|showDone/)) {\r\n      this.setState((state) => {\r\n        return {\r\n          showStatus: instructionID,\r\n        };\r\n      });\r\n    }\r\n  }\r\n  eliminateDone() {\r\n    this.setState((state) => {\r\n      return {\r\n        todoList: state.todoList.filter((todo) => {\r\n          return !todo.isDone;\r\n        }),\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    // categorize done or undone with map\r\n    let modifiedToDoList = this.state.todoList.slice();\r\n    if (this.state.showStatus === \"showActive\") {\r\n      modifiedToDoList = modifiedToDoList.filter((todo) => {\r\n        return !todo.isDone;\r\n      });\r\n    } else if (this.state.showStatus === \"showDone\") {\r\n      modifiedToDoList = modifiedToDoList.filter((todo) => {\r\n        return todo.isDone;\r\n      });\r\n    } else {\r\n      // isDone===trueを後ろにする\r\n      modifiedToDoList.sort((fE, sE) => {\r\n        // sE未完 => fE完\r\n        if (fE.isDone > sE.isDone) {\r\n          return 1;\r\n          // fE未完 => sE完\r\n        } else if (fE.isDone < sE.isDone) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div id=\"todoWrapper\">\r\n        <Header\r\n          onDescriptionClick={this.handleDescriptionClick.bind(this)}\r\n          showDescription={this.state.showDescription}\r\n        />\r\n        <Generator\r\n          inputValue={this.state.input}\r\n          onInputChange={this.handleInputChange.bind(this)}\r\n          addToDo={this.addToDo.bind(this)}\r\n          clearForm={this.clearForm.bind(this)}\r\n          turnMessageOn={this.turnMessageOn.bind(this)}\r\n          turnMessageOff={this.turnMessageOff.bind(this)}\r\n        />\r\n        <Controller\r\n          handleShowStatusClick={this.handleShowStatusClick.bind(this)}\r\n          eliminateDone={this.eliminateDone.bind(this)}\r\n        />\r\n        <Container\r\n          todoList={modifiedToDoList}\r\n          handleToDoClick={this.handleToDoClick.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Header extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"headerWrapper\">\r\n        <header>\r\n          <h1 id=\"title\">React-To-Do</h1>\r\n          <nav id=\"headerNav\">\r\n            <ul>\r\n              <li\r\n                className=\"DrowingButton\"\r\n                onClick={this.props.onDescriptionClick}\r\n              >\r\n                <i className=\"fa fa-info-circle \"></i>\r\n                <div className=\"headerNavDetail\">このアプリについて</div>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n        </header>\r\n        <Description\r\n          style={{\r\n            display: this.props.showDescription ? \"block\" : \"none\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass Description extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id=\"description\" style={this.props.style}>\r\n        <div>\r\n          Flex-To-Doは簡潔でわかりやすさを徹底してつくられたリマインダーアプリです。\r\n          <br />\r\n          著者： <em>YukiYama</em>\r\n        </div>\r\n        <div>\r\n          <h2>このアプリの特徴</h2>\r\n          いたってシンプルなタスク管理アプリで、以下の機能を持ちます。\r\n          <ul>\r\n            <li>EnterキーによるToDoの追加(PCのみ)</li>\r\n            <li>入力欄への自動フォーカス</li>\r\n            <li>ToDoの表示切り替え</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass Generator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"todoGenerator\">\r\n        <input\r\n          type=\"text\"\r\n          value={this.props.inputValue}\r\n          style={\r\n            // 初期メッセージなら薄くする\r\n            this.props.inputValue === inputMessage\r\n              ? { color: \"rgb(150,150,150)\" }\r\n              : {}\r\n          }\r\n          onChange={this.props.onInputChange}\r\n          onFocus={this.props.turnMessageOff}\r\n          onBlur={this.props.turnMessageOn}\r\n        />\r\n        <button id=\"ctdAdd\" onClick={this.props.addToDo}>\r\n          追加\r\n        </button>\r\n        <button id=\"clearFormBtn\" onClick={this.props.clearForm}>\r\n          クリア\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass Container extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    console.log(this.props.todoList);\r\n    return (\r\n      <ul id=\"container\">\r\n        {this.props.todoList.length ? (\r\n          this.props.todoList.map((todo, i) => (\r\n            <li\r\n              className=\"todoElement\"\r\n              key={todo.key}\r\n              // in order to glab key value\r\n              id={todo.key}\r\n              isdone={todo.isDone.toString()}\r\n              onClick={this.props.handleToDoClick}\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={todo.isDone ? true : false}\r\n                readOnly\r\n              />\r\n              <span>{todo.value ? todo.value : \"名無しのToDo\"}</span>\r\n              <button id=\"deleteBtn\">\r\n                <i className=\"fa fa-close\" />\r\n              </button>\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <li>表示するToDoがありません。</li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\nclass Controller extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"todoController\">\r\n        <ul id=\"showStatus\" onClick={this.props.handleShowStatusClick}>\r\n          <li id=\"showAll\">すべて</li>\r\n          <li id=\"showActive\">未完のみ</li>\r\n          <li id=\"showDone\">完了のみ</li>\r\n        </ul>\r\n        <div id=\"clearDone\" onClick={this.props.eliminateDone}>\r\n          完了したものを消す\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { ToDo };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ToDo } from \"./ToDo\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToDo />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}